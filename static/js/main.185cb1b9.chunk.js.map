{"version":3,"sources":["redux/actions.js","components/Form/Form.jsx","redux/operations.js","redux/selectors.js","components/ListContacts/ListContacts.jsx","components/Filter/Filter.jsx","App.jsx","redux/reducer.js","redux/store.jsx","index.js"],"names":["changeFilter","createAction","Form","onSubmit","useState","name","setName","number","setNumber","type","e","preventDefault","value","pattern","title","required","onChange","currentTarget","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","contacts","data","getContacts","state","entities","getFilter","filter","ListContacts","dispatch","useDispatch","useEffect","operations","useSelector","selectors","length","map","id","Filter","uuidv4","htmlFor","event","target","App","className","contactsSlice","createSlice","initialState","isLoading","error","reducers","payload","extraReducers","fulfilled","action","pending","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAKaA,EAAaC,YAAa,yB,OCDxB,SAASC,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAC7B,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KASA,OACE,uBAAMC,KAAK,SAASN,SAPD,SAACO,GACpBA,EAAEC,iBACFR,EAAS,CAAEE,OAAME,WACjBD,EAAQ,IACRE,EAAU,KAGV,UACE,yCAEE,uBACEI,MAAOP,EACPI,KAAK,OACLJ,KAAK,OACLQ,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAnBiB,SAACN,GAAD,OAAOJ,EAAQI,EAAEO,cAAcL,aAsBpD,2CAEE,uBACEA,MAAOL,EACPE,KAAK,MACLJ,KAAK,SACLQ,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SA9BmB,SAACN,GAAD,OAAOF,EAAUE,EAAEO,cAAcL,aAiCxD,wBAAQH,KAAK,SAAb,4B,8CChCNS,IAAMC,SAASC,QADH,wBAGL,IAAMC,EAAcC,YACzB,yBADyC,uCAEzC,WAAOC,EAAP,oBAAAC,EAAA,6DAAWC,EAAX,EAAWA,gBAAX,kBAE0BP,IAAMQ,IAAI,aAFpC,cAEUC,EAFV,yBAGWA,EAASC,MAHpB,yDAKWH,EAAgB,EAAD,KAL1B,yDAFyC,yDCX9BI,EAAa,SAAAC,GAAK,OAAIA,EAAMH,SAASI,UACrCC,EAAU,SAAAF,GAAK,OAAEA,EAAMH,SAASM,QCO9B,SAASC,IACrB,IAAMC,EAAWC,cACjBC,qBAAU,WACTF,EAASG,OACP,CAACH,IACJ,IAAMR,EAASY,YAAYC,GAE5B,OAAQ,6BACLb,EAASc,OAAO,GAAKd,EAASe,KAAI,gBAAGC,EAAH,EAAGA,GAAItC,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACjC,+BACGF,EADH,IACUE,EACR,wBAAQE,KAAK,SAAb,sBAFOkC,Q,YCTC,SAASC,IACvB,IAAMD,EAAKE,cACLV,EAASC,cACTxB,EAAM2B,YAAYP,GAKxB,OACE,qCACE,uBAAOc,QAASH,EAAhB,iBACA,uBAAOA,GAAIA,EAAIlC,KAAK,OAAOG,MAAOA,EAAOI,SAP9B,SAAA+B,GACbA,EAAMpC,iBACNwB,EAASnC,EAAa+C,EAAMC,OAAOpC,cCRxB,SAASqC,IACtB,OACE,sBAAKC,UAAU,MAAf,UACE,2CACA,cAAChD,EAAD,IACA,0CACA,gDACA,cAAC0C,EAAD,IACA,cAACV,EAAD,O,cCmCSiB,EAxBKC,YAAY,CAC9B/C,KAAM,WACNgD,aAAc,CAACtB,SAAS,GAAGuB,WAAW,EAAOC,MAAO,KAAMtB,OAAO,IACjEuB,SAAS,CACLvB,OAAQ,SAACV,EAAD,YAAMkC,UAElBC,eAAa,mBACVrC,EAAcsC,WAAW,SAAC7B,EAAO8B,GAKhC9B,EAAMC,SAAS6B,EAAOH,WANb,cAQVpC,EAAcwC,SAAS,SAAA/B,GAKtBA,EAAMwB,WAAU,KAbP,KAkBf,QC9CaQ,EAAOC,YAAe,CACjCC,QAAS,CACPrC,SAAUsC,K,MCGdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SAEI,cAAC,EAAD,QAINO,SAASC,eAAe,W","file":"static/js/main.185cb1b9.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\n// export const getAllContactsRequest = createAction('getAllContactsRequest');\n// export const getAllContactsSuccess = createAction('getAllContactsSuccess');\n// export const getAllContactsError = createAction('getAllContactsError');\nexport const changeFilter=createAction('contacts/changeFilter')\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport actions from 'redux/actions'\r\n\r\nexport default function Form({ onSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const handleNameChange = (e) => setName(e.currentTarget.value)\r\n  const handleNumberChange = (e) => setNumber(e.currentTarget.value)\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    onSubmit({ name, number })\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n  return (\r\n    <form type=\"submit\" onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleNameChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleNumberChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  )\r\n}\r\n// const mapDispatchToProrps = (dispatch) => ({\r\n//   onSubmit: (obj) => dispatch(actions.addContact(obj)),\r\n// })\r\n// export default connect(null, mapDispatchToProrps)(Form)","import axios from 'axios';\r\n// import {\r\n//     getAllContactsRequest,\r\n//     getAllContactsSuccess,\r\n//     getAllContactsError,\r\n// } from './actions';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nconst URL = 'http://localhost:4343';\r\naxios.defaults.baseURL = URL;\r\n\r\nexport const fetchContacts=createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async (_, {rejectWithValue}) => {\r\n    try {\r\n      const contacts =await axios.get('/contacts')\r\n      return contacts.data\r\n    } catch (error) {\r\n      return rejectWithValue(error)\r\n    }\r\n   \r\n  }\r\n)\r\n\r\n// export const fetchContacts = () => async dispatch => {\r\n//   dispatch(getAllContactsRequest());\r\n//   try {\r\n//       const contacts=await axios.get('/contacts')\r\n//       dispatch(getAllContactsSuccess(contacts.data))\r\n//   } catch (error) {\r\n//     dispatch(getAllContactsError(error))\r\n//   }\r\n// };","export const getContacts= state => state.contacts.entities\r\nexport const getFilter=state=>state.contacts.filter","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport * as operations from 'redux/operations'\r\nimport * as selectors from 'redux/selectors'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function ListContacts() {\r\n   const dispatch = useDispatch()\r\n   useEffect(() => {\r\n    dispatch(operations.fetchContacts())\r\n   }, [dispatch])\r\n   const contacts=useSelector(selectors.getContacts)\r\n\r\n  return (<ul>\r\n    {contacts.length>0 && contacts.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        {name} {number}\r\n        <button type=\"button\">\r\n          delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>)\r\n}\r\n\r\n// ListContacts.propTypes = {\r\n//   contacts: PropTypes.oneOfType([\r\n//     PropTypes.string,\r\n//     PropTypes.number,\r\n//     PropTypes.array,\r\n//   ]),\r\n//   onClick: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const filteredContactList = (fullList, filter) => {\r\n//   const filterValueNorm = filter.toLowerCase();\r\n//   return fullList.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(filterValueNorm)\r\n//   );\r\n// }\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: filteredContactList(items, filter)\r\n// })\r\n// const mapDispatchTooProps = dispatch => ({\r\n//   onClick: (id) => dispatch(ations.deleteContact(id))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchTooProps)(ListContacts)","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {changeFilter} from \"redux/actions\";\r\nimport { useSelector,useDispatch} from \"react-redux\";\r\nimport { getFilter } from \"redux/selectors\";\r\n\r\nexport default  function Filter (){\r\n  const id = uuidv4();\r\n  const dispatch=useDispatch()\r\n  const value=useSelector(getFilter)\r\n  const onChange=event=>{\r\n    event.preventDefault()\r\n    dispatch(changeFilter(event.target.value))\r\n  }\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>   </label>\r\n      <input id={id} type=\"text\" value={value} onChange={onChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: state.contacts.filter,\r\n\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: (e) => dispatch(actions.changeFilter(e.target.value))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Form from \"./components/Form/Form\";\r\nimport ListContacts from \"./components/ListContacts/ListContacts\";\r\nimport Filter from \"./components/Filter/Filter\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h3>Phonebook</h3>\r\n      <Form />\r\n      <h3>Contacts</h3>\r\n      <p>filter via name</p>\r\n      <Filter />\r\n      <ListContacts />\r\n    </div>\r\n  )\r\n}\r\n\r\n","import { combineReducers } from 'redux'\nimport { createReducer, createSlice } from '@reduxjs/toolkit'\nimport { fetchContacts } from './operations'\n\n// const entities = createReducer([], {\n//   [fetchContacts.fulfilled]: (_, action) => {\n//     return action.payload\n//   },\n// })\n// const isLoading = createReducer(false, {\n//   [fetchContacts.pending]: () => true,\n//   [fetchContacts.fulfilled]: () => false,\n//   [fetchContacts.rejected]: () => false,\n// })\n\n// const error = createReducer(null, {\n//   [fetchContacts.rejected]: (_, action) => action.payload,\n//   [fetchContacts.pending]: () => null,\n// })\n// export default combineReducers({\n//   entities,\n//   isLoading,\n//   error,\n// })\n\nconst contactsSlice=createSlice({\n  name: 'contacts', \n  initialState: {entities:[],isLoading: false, error: null, filter:'' },\n  reducers:{\n      filter: (_, { payload }) => payload,\n  },\n  extraReducers: {\n    [fetchContacts.fulfilled]:(state, action)=>{\n      // return {\n      //   ...state,\n      //   entities:action.payload, \n      // }IMMER:\n      state.entities=action.payload\n    },\n    [fetchContacts.pending]:state=>{\n      // return {\n      //   ...state,\n      //   isLoading:true\n      // }\n      state.isLoading=true //IMMER works\n    }\n  }\n})\n\nexport default contactsSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\r\nimport contactsReducer from './reducer'\r\n\r\nexport const store= configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n})\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { Provider } from \"react-redux\";\nimport {store} from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={\"...Loading\"} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}